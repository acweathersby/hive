#pragma once

#include "./input.hpp"

namespace hive
{
    namespace gl
    {

        void SmartGLInput::deleteUnderlyingGLResource() {}


        /**
         *
         *    glVertexAttribPointer and glVertexAttribIPointer:
         *    GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT,
         *    GL_INT, and GL_UNSIGNED_INT
         *
         *    glVertexAttribPointer:
         *    GL_HALF_FLOAT, GL_FLOAT, GL_DOUBLE, GL_FIXED, GL_INT_2_10_10_10_REV,
         *   GL_UNSIGNED_INT_2_10_10_10_REV and GL_UNSIGNED_INT_10F_11F_11F_REV
         *
         *    glVertexAttribLPointer ONLY:
         *    GL_DOUBLE
         *
         */
        void SmartGLInput::use(VRAMBuffer & buffer, GLenum type, unsigned stride, unsigned off,
                               unsigned divisor, bool normalize)
        {

#ifdef HIVE_DEBUG //############################## DEBUG

            clearErrors();
#endif //############################## END DEBUG

            if (!IS_READY) {
                throw("Attribute pointer is not ready to be used.");
                return;
            }

            buffer.use(SKGLB::ARRAY_BUFFER);

            glVertexAttribDivisor(pointer, divisor);

            glEnableVertexAttribArray(pointer);

            switch (primitive) {
            case 0: // uint
            case 1: // int
                glVertexAttribIPointer(pointer, size, type, stride, (void *)off);
                break;
            case 2: // float
                glVertexAttribPointer(pointer, size, type, GL_FALSE, stride, (void *)off);
                break;
            case 3: // double
                glVertexAttribLPointer(pointer, size, type, stride, (void *)off);
                break;
            }

#ifdef HIVE_DEBUG //############################## DEBUG

            GLenum error = glGetError();

            if (error != GL_NO_ERROR) IS_READY = false;

            switch (error) {
            case GL_INVALID_ENUM:
                // GL_INVALID_VALUE is generated if stride is negative.
                __ERROR("Stride is negative");
                break;


            case GL_INVALID_VALUE:
                /**
                 * GL_INVALID_VALUE is generated if index is greater than or equal to
                 * GL_MAX_VERTEX_ATTRIBS.
                 *
                 * GL_INVALID_VALUE is generated if size is not 1, 2, 3, 4 or (for
                 * glVertexAttribPointer), GL_BGRA.
                 */
                __ERROR("Buffer name is not valid.");
                break;

                /**
                 * GL_INVALID_OPERATION is generated if size is GL_BGRA and type is not
                 *GL_UNSIGNED_BYTE, GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV.
                 *
                 *GL_INVALID_OPERATION is generated if type is GL_INT_2_10_10_10_REV or
                 *GL_UNSIGNED_INT_2_10_10_10_REV and size is not 4 or GL_BGRA.
                 *
                 *GL_INVALID_OPERATION is generated if type is GL_UNSIGNED_INT_10F_11F_11F_REV and
                 *size is not 3.
                 *
                 *GL_INVALID_OPERATION is generated by glVertexAttribPointer if size is GL_BGRA and
                 *normalized is GL_FALSE.
                 *
                 *GL_INVALID_OPERATION is generated if zero is bound to the GL_ARRAY_BUFFER buffer
                 *object binding point and the pointer argument is not NULL.
                 */
            case GL_INVALID_OPERATION:
                __ERROR("TODO - invalid operation message in input.");
                break;
            }
#endif //############################## END DEBUG
        }

        void SmartGLInput::release() {}

        bool SmartGLInput::IS_USABLE() { return true; }
    } // namespace gl
} // namespace hive
