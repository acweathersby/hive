#include "include/hive.h"


hive::ShaderArtifact::ArtifactType hive::getGLSLSamplerArtifactType(GLint t)
{
    switch (t) {
    case GL_SAMPLER_1D:
    case GL_SAMPLER_1D_SHADOW:
    case GL_SAMPLER_1D_ARRAY:
    case GL_SAMPLER_1D_ARRAY_SHADOW:
    case GL_SAMPLER_BUFFER:
    case GL_INT_SAMPLER_1D:
    case GL_INT_SAMPLER_1D_ARRAY:
    case GL_INT_SAMPLER_BUFFER:
    case GL_UNSIGNED_INT_SAMPLER_1D:
    case GL_UNSIGNED_INT_SAMPLER_1D_ARRAY:
    case GL_UNSIGNED_INT_SAMPLER_BUFFER:
        return hive::ShaderArtifact::ArtifactType::Texture1D;
    case GL_SAMPLER_2D:
    case GL_SAMPLER_2D_SHADOW:
    case GL_SAMPLER_2D_ARRAY:
    case GL_SAMPLER_2D_ARRAY_SHADOW:
    case GL_SAMPLER_2D_MULTISAMPLE:
    case GL_SAMPLER_2D_MULTISAMPLE_ARRAY:
    case GL_SAMPLER_CUBE_SHADOW:
    case GL_SAMPLER_2D_RECT:
    case GL_SAMPLER_2D_RECT_SHADOW:
    case GL_INT_SAMPLER_2D:
    case GL_INT_SAMPLER_2D_ARRAY:
    case GL_INT_SAMPLER_2D_MULTISAMPLE:
    case GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY:
    case GL_INT_SAMPLER_2D_RECT:
    case GL_UNSIGNED_INT_SAMPLER_2D:
    case GL_UNSIGNED_INT_SAMPLER_2D_ARRAY:
    case GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE:
    case GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY:
        return hive::ShaderArtifact::ArtifactType::Texture2D;
    case GL_SAMPLER_3D:
    case GL_INT_SAMPLER_3D:
    case GL_UNSIGNED_INT_SAMPLER_3D:
        return hive::ShaderArtifact::ArtifactType::Texture3D;
    case GL_SAMPLER_CUBE:
    case GL_INT_SAMPLER_CUBE:
    case GL_UNSIGNED_INT_SAMPLER_CUBE:
    case GL_UNSIGNED_INT_SAMPLER_2D_RECT:
        return hive::ShaderArtifact::ArtifactType::TextureCube;
    }
    return hive::ShaderArtifact::ArtifactType::TextureCube;
}

bool hive::isUniformTypeSampler(GLint t)
{
    switch (t) {
    case GL_SAMPLER_1D:
    case GL_SAMPLER_2D:
    case GL_SAMPLER_3D:
    case GL_SAMPLER_CUBE:
    case GL_SAMPLER_1D_SHADOW:
    case GL_SAMPLER_2D_SHADOW:
    case GL_SAMPLER_1D_ARRAY:
    case GL_SAMPLER_2D_ARRAY:
    case GL_SAMPLER_1D_ARRAY_SHADOW:
    case GL_SAMPLER_2D_ARRAY_SHADOW:
    case GL_SAMPLER_2D_MULTISAMPLE:
    case GL_SAMPLER_2D_MULTISAMPLE_ARRAY:
    case GL_SAMPLER_CUBE_SHADOW:
    case GL_SAMPLER_BUFFER:
    case GL_SAMPLER_2D_RECT:
    case GL_SAMPLER_2D_RECT_SHADOW:
    case GL_INT_SAMPLER_1D:
    case GL_INT_SAMPLER_2D:
    case GL_INT_SAMPLER_3D:
    case GL_INT_SAMPLER_CUBE:
    case GL_INT_SAMPLER_1D_ARRAY:
    case GL_INT_SAMPLER_2D_ARRAY:
    case GL_INT_SAMPLER_2D_MULTISAMPLE:
    case GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY:
    case GL_INT_SAMPLER_BUFFER:
    case GL_INT_SAMPLER_2D_RECT:
    case GL_UNSIGNED_INT_SAMPLER_1D:
    case GL_UNSIGNED_INT_SAMPLER_2D:
    case GL_UNSIGNED_INT_SAMPLER_3D:
    case GL_UNSIGNED_INT_SAMPLER_CUBE:
    case GL_UNSIGNED_INT_SAMPLER_1D_ARRAY:
    case GL_UNSIGNED_INT_SAMPLER_2D_ARRAY:
    case GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE:
    case GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY:
    case GL_UNSIGNED_INT_SAMPLER_BUFFER:
    case GL_UNSIGNED_INT_SAMPLER_2D_RECT:
        return true;
    }
    return false;
}

// Byte size of a single element of type.
unsigned hive::getGLSLTypeSize(GLint t)
{
    switch (t) {
    case GL_FLOAT:
        return 4;
    case GL_FLOAT_VEC2:
        return 8;
    case GL_FLOAT_VEC3:
        return 12;
    case GL_FLOAT_VEC4:
        return 16;
    case GL_DOUBLE:
        return 8;
    case GL_DOUBLE_VEC2:
        return 16;
    case GL_DOUBLE_VEC3:
        return 24;
    case GL_DOUBLE_VEC4:
        return 32;
    case GL_INT:
        return 4;
    case GL_INT_VEC2:
        return 8;
    case GL_INT_VEC3:
        return 12;
    case GL_INT_VEC4:
        return 16;
    case GL_UNSIGNED_INT:
        return 4;
    case GL_UNSIGNED_INT_VEC2:
        return 8;
    case GL_UNSIGNED_INT_VEC3:
        return 12;
    case GL_UNSIGNED_INT_VEC4:
        return 16;
    case GL_BOOL:
        return 4;
    case GL_BOOL_VEC2:
        return 8;
    case GL_BOOL_VEC3:
        return 12;
    case GL_BOOL_VEC4:
        return 16;
    case GL_FLOAT_MAT2:
        return 16;
    case GL_FLOAT_MAT3:
        return 36;
    case GL_FLOAT_MAT4:
        return 64;
    case GL_FLOAT_MAT2x3:
        return 24;
    case GL_FLOAT_MAT2x4:
        return 32;
    case GL_FLOAT_MAT3x2:
        return 24;
    case GL_FLOAT_MAT3x4:
        return 42;
    case GL_FLOAT_MAT4x2:
        return 32;
    case GL_FLOAT_MAT4x3:
        return 42;
    case GL_DOUBLE_MAT2:
        return 32;
    case GL_DOUBLE_MAT3:
        return 72;
    case GL_DOUBLE_MAT4:
        return 128;
    case GL_DOUBLE_MAT2x3:
        return 48;
    case GL_DOUBLE_MAT2x4:
        return 64;
    case GL_DOUBLE_MAT3x2:
        return 48;
    case GL_DOUBLE_MAT3x4:
        return 84;
    case GL_DOUBLE_MAT4x2:
        return 64;
    case GL_DOUBLE_MAT4x3:
        return 84;
    case GL_SAMPLER_1D:
        return 4;
    case GL_SAMPLER_2D:
        return 8;
    case GL_SAMPLER_3D:
        return 12;
    case GL_SAMPLER_CUBE:
        return 12;
    case GL_SAMPLER_1D_SHADOW:
        return 4;
    case GL_SAMPLER_2D_SHADOW:
        return 8;
    case GL_SAMPLER_1D_ARRAY:
        return 12;
    case GL_SAMPLER_2D_ARRAY:
        return 8;
    case GL_SAMPLER_1D_ARRAY_SHADOW:
        return 4;
    case GL_SAMPLER_2D_ARRAY_SHADOW:
        return 8;
    case GL_SAMPLER_2D_MULTISAMPLE:
        return 8;
    case GL_SAMPLER_2D_MULTISAMPLE_ARRAY:
        return 8;
    case GL_SAMPLER_CUBE_SHADOW:
        return 24;
    case GL_SAMPLER_BUFFER:
        return 4;
    case GL_SAMPLER_2D_RECT:
        return 8;
    case GL_SAMPLER_2D_RECT_SHADOW:
        return 8;
    case GL_INT_SAMPLER_1D:
        return 4;
    case GL_INT_SAMPLER_2D:
        return 8;
    case GL_INT_SAMPLER_3D:
        return 12;
    case GL_INT_SAMPLER_CUBE:
        return 24;
    case GL_INT_SAMPLER_1D_ARRAY:
        return 4;
    case GL_INT_SAMPLER_2D_ARRAY:
        return 8;
    case GL_INT_SAMPLER_2D_MULTISAMPLE:
        return 8;
    case GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY:
        return 8;
    case GL_INT_SAMPLER_BUFFER:
        return 4;
    case GL_INT_SAMPLER_2D_RECT:
        return 8;
    case GL_UNSIGNED_INT_SAMPLER_1D:
        return 4;
    case GL_UNSIGNED_INT_SAMPLER_2D:
        return 8;
    case GL_UNSIGNED_INT_SAMPLER_3D:
        return 12;
    case GL_UNSIGNED_INT_SAMPLER_CUBE:
        return 24;
    case GL_UNSIGNED_INT_SAMPLER_1D_ARRAY:
        return 4;
    case GL_UNSIGNED_INT_SAMPLER_2D_ARRAY:
        return 8;
    case GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE:
        return 8;
    case GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY:
        return 8;
    case GL_UNSIGNED_INT_SAMPLER_BUFFER:
        return 4;
    case GL_UNSIGNED_INT_SAMPLER_2D_RECT:
        return 8;
    }
    return 0;
}
// Quick primitive type reference for GLSL types.
hive::ShaderArtifact::ElementPrimitiveType hive::getGLSLTypePrimitive(GLint t)
{
    switch (t) {
    case GL_FLOAT:
        return ShaderArtifact::ElementPrimitiveType::FLOAT;
    case GL_FLOAT_VEC2:
        return ShaderArtifact::ElementPrimitiveType::FLOAT;
    case GL_FLOAT_VEC3:
        return ShaderArtifact::ElementPrimitiveType::FLOAT;
    case GL_FLOAT_VEC4:
        return ShaderArtifact::ElementPrimitiveType::FLOAT;
    case GL_FLOAT_MAT2:
        return ShaderArtifact::ElementPrimitiveType::FLOAT;
    case GL_FLOAT_MAT3:
        return ShaderArtifact::ElementPrimitiveType::FLOAT;
    case GL_FLOAT_MAT4:
        return ShaderArtifact::ElementPrimitiveType::FLOAT;
    case GL_FLOAT_MAT2x3:
        return ShaderArtifact::ElementPrimitiveType::FLOAT;
    case GL_FLOAT_MAT3x2:
        return ShaderArtifact::ElementPrimitiveType::FLOAT;
    case GL_FLOAT_MAT2x4:
        return ShaderArtifact::ElementPrimitiveType::FLOAT;
    case GL_FLOAT_MAT4x2:
        return ShaderArtifact::ElementPrimitiveType::FLOAT;
    case GL_FLOAT_MAT3x4:
        return ShaderArtifact::ElementPrimitiveType::FLOAT;
    case GL_FLOAT_MAT4x3:
        return ShaderArtifact::ElementPrimitiveType::FLOAT;
    case GL_INT:
        return ShaderArtifact::ElementPrimitiveType::INTEGER;
    case GL_INT_VEC2:
        return ShaderArtifact::ElementPrimitiveType::INTEGER;
    case GL_INT_VEC3:
        return ShaderArtifact::ElementPrimitiveType::INTEGER;
    case GL_INT_VEC4:
        return ShaderArtifact::ElementPrimitiveType::INTEGER;
    case GL_UNSIGNED_INT:
        return ShaderArtifact::ElementPrimitiveType::UNSIGNED_INTEGER;
    case GL_UNSIGNED_INT_VEC2:
        return ShaderArtifact::ElementPrimitiveType::UNSIGNED_INTEGER;
    case GL_UNSIGNED_INT_VEC3:
        return ShaderArtifact::ElementPrimitiveType::UNSIGNED_INTEGER;
    case GL_UNSIGNED_INT_VEC4:
        return ShaderArtifact::ElementPrimitiveType::UNSIGNED_INTEGER;
    case GL_DOUBLE:
        return ShaderArtifact::ElementPrimitiveType::DOUBLE;
    case GL_DOUBLE_VEC2:
        return ShaderArtifact::ElementPrimitiveType::DOUBLE;
    case GL_DOUBLE_VEC3:
        return ShaderArtifact::ElementPrimitiveType::DOUBLE;
    case GL_DOUBLE_VEC4:
        return ShaderArtifact::ElementPrimitiveType::DOUBLE;
    case GL_DOUBLE_MAT2:
        return ShaderArtifact::ElementPrimitiveType::DOUBLE;
    case GL_DOUBLE_MAT3:
        return ShaderArtifact::ElementPrimitiveType::DOUBLE;
    case GL_DOUBLE_MAT4:
        return ShaderArtifact::ElementPrimitiveType::DOUBLE;
    case GL_DOUBLE_MAT2x3:
        return ShaderArtifact::ElementPrimitiveType::DOUBLE;
    case GL_DOUBLE_MAT3x2:
        return ShaderArtifact::ElementPrimitiveType::INTEGER;
    case GL_DOUBLE_MAT2x4:
        return ShaderArtifact::ElementPrimitiveType::INTEGER;
    case GL_DOUBLE_MAT4x2:
        return ShaderArtifact::ElementPrimitiveType::INTEGER;
    case GL_DOUBLE_MAT3x4:
        return ShaderArtifact::ElementPrimitiveType::INTEGER;
    case GL_DOUBLE_MAT4x3:
        return ShaderArtifact::ElementPrimitiveType::INTEGER;
    }

    return ShaderArtifact::ElementPrimitiveType::UNSIGNED_INTEGER;
};

// Number of elements per type
unsigned hive::getGLSLTypeElementCount(GLint t)
{
    switch (t) {
    case GL_FLOAT:
        return 1;
    case GL_FLOAT_VEC2:
        return 2;
    case GL_FLOAT_VEC3:
        return 3;
    case GL_FLOAT_VEC4:
        return 4;
    case GL_DOUBLE:
        return 1;
    case GL_DOUBLE_VEC2:
        return 2;
    case GL_DOUBLE_VEC3:
        return 3;
    case GL_DOUBLE_VEC4:
        return 4;
    case GL_INT:
        return 1;
    case GL_INT_VEC2:
        return 2;
    case GL_INT_VEC3:
        return 3;
    case GL_INT_VEC4:
        return 4;
    case GL_UNSIGNED_INT:
        return 1;
    case GL_UNSIGNED_INT_VEC2:
        return 2;
    case GL_UNSIGNED_INT_VEC3:
        return 3;
    case GL_UNSIGNED_INT_VEC4:
        return 4;
    case GL_BOOL:
        return 1;
    case GL_BOOL_VEC2:
        return 2;
    case GL_BOOL_VEC3:
        return 3;
    case GL_BOOL_VEC4:
        return 4;
    case GL_FLOAT_MAT2:
        return 4;
    case GL_FLOAT_MAT3:
        return 9;
    case GL_FLOAT_MAT4:
        return 16;
    case GL_FLOAT_MAT2x3:
        return 6;
    case GL_FLOAT_MAT2x4:
        return 8;
    case GL_FLOAT_MAT3x2:
        return 6;
    case GL_FLOAT_MAT3x4:
        return 12;
    case GL_FLOAT_MAT4x2:
        return 8;
    case GL_FLOAT_MAT4x3:
        return 12;
    case GL_DOUBLE_MAT2:
        return 4;
    case GL_DOUBLE_MAT3:
        return 9;
    case GL_DOUBLE_MAT4:
        return 16;
    case GL_DOUBLE_MAT2x3:
        return 6;
    case GL_DOUBLE_MAT2x4:
        return 8;
    case GL_DOUBLE_MAT3x2:
        return 6;
    case GL_DOUBLE_MAT3x4:
        return 12;
    case GL_DOUBLE_MAT4x2:
        return 8;
    case GL_DOUBLE_MAT4x3:
        return 12;
    case GL_SAMPLER_1D:
        return 1;
    case GL_SAMPLER_2D:
        return 2;
    case GL_SAMPLER_3D:
        return 3;
    case GL_SAMPLER_CUBE:
        return 3;
    case GL_SAMPLER_1D_SHADOW:
        return 1;
    case GL_SAMPLER_2D_SHADOW:
        return 2;
    case GL_SAMPLER_1D_ARRAY:
        return 3;
    case GL_SAMPLER_2D_ARRAY:
        return 2;
    case GL_SAMPLER_1D_ARRAY_SHADOW:
        return 1;
    case GL_SAMPLER_2D_ARRAY_SHADOW:
        return 2;
    case GL_SAMPLER_2D_MULTISAMPLE:
        return 2;
    case GL_SAMPLER_2D_MULTISAMPLE_ARRAY:
        return 2;
    case GL_SAMPLER_CUBE_SHADOW:
        return 6;
    case GL_SAMPLER_BUFFER:
        return 1;
    case GL_SAMPLER_2D_RECT:
        return 2;
    case GL_SAMPLER_2D_RECT_SHADOW:
        return 2;
    case GL_INT_SAMPLER_1D:
        return 1;
    case GL_INT_SAMPLER_2D:
        return 2;
    case GL_INT_SAMPLER_3D:
        return 3;
    case GL_INT_SAMPLER_CUBE:
        return 6;
    case GL_INT_SAMPLER_1D_ARRAY:
        return 1;
    case GL_INT_SAMPLER_2D_ARRAY:
        return 2;
    case GL_INT_SAMPLER_2D_MULTISAMPLE:
        return 2;
    case GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY:
        return 2;
    case GL_INT_SAMPLER_BUFFER:
        return 1;
    case GL_INT_SAMPLER_2D_RECT:
        return 2;
    case GL_UNSIGNED_INT_SAMPLER_1D:
        return 1;
    case GL_UNSIGNED_INT_SAMPLER_2D:
        return 2;
    case GL_UNSIGNED_INT_SAMPLER_3D:
        return 3;
    case GL_UNSIGNED_INT_SAMPLER_CUBE:
        return 6;
    case GL_UNSIGNED_INT_SAMPLER_1D_ARRAY:
        return 1;
    case GL_UNSIGNED_INT_SAMPLER_2D_ARRAY:
        return 2;
    case GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE:
        return 2;
    case GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY:
        return 2;
    case GL_UNSIGNED_INT_SAMPLER_BUFFER:
        return 1;
    case GL_UNSIGNED_INT_SAMPLER_2D_RECT:
        return 2;
    }
    return 0;
}