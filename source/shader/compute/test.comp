#version 430

layout(local_size_x = 10, local_size_y = 1) in;

struct Pixel{
  vec2 Position;              // 0
  vec2 Velocity;              // 2
  float Buffer;               // 3
  float Radius;               // 4
  float Mass;                 // 5
  float FrictionCoefficient;  // 6
  int linkname[4];            // 7
};

struct Locality {
  int set;                    // Bitfield of pixels set. Needs to be fenced.
  int index[7];               // Pixel identifiers;
};

layout(std430, binding = 1) buffer Pixels {
  Pixel pixels[];  
} ;

layout(std430, binding = 2) buffer Localities {
  Locality localities[100][100]; 
};

void main() {

  uint id = gl_GlobalInvocationID.x;
  //
  // interesting stuff happens here later
  //
  
  Pixel pix = pixels[id];

  pix.Position += pix.Velocity * 0.99995;
  pix.Velocity *= 0.999995;

  //assign pixel to locality based on pixel position
  vec2 pos = pix.Position;

  ivec2 locale = ivec2( (round(pos)/ 10.0) + vec2(50.0,50.0);

  //get the index of the Locality
  int index = atomicAdd(localities[local].setâ€‹, 1);

  index = max(index, 8);

  localities[index]

  pixels[id] = pix;
}